#include "tokens.h"

const std::map<TokenClass, std::string> Token::ClassMap = {
        { TokenClass::StringConstant, "StringConstant" },
        { TokenClass::Identifier, "Identifier" },
        { TokenClass::Keyword, "Keyword" },
        { TokenClass::Punctuator, "Punctuator" },
        { TokenClass::NumericalConstant, "NumericalConstant" },
};

const std::map<TokenType, std::string> Token::TypeMap = {
        { TokenType::ConstString, "ConstString" },
        { TokenType::Identifier, "Identifier" },
        { TokenType::ConstFloat, "ConstFloat" },
        { TokenType::ConstDouble, "ConstDouble" },
        { TokenType::ConstInt, "ConstInt" },
        { TokenType::ConstUnsignedInt, "ConstUnsignedInt" },
        { TokenType::ConstLong, "ConstLong" },
        { TokenType::ConstUnsignedLong, "ConstUnsignedLong" },
        { TokenType::ConstLongLong, "ConstLongLong" },
        { TokenType::ConstUnsignedLongLong, "ConstUnsignedLongLong" },
        { TokenType::Auto, "auto" },
        { TokenType::Break, "break" },
        { TokenType::Case, "case" },
        { TokenType::Char, "char" },
        { TokenType::Const, "const" },
        { TokenType::Continue, "continue" },
        { TokenType::Default, "default" },
        { TokenType::Do, "do" },
        { TokenType::Double, "double" },
        { TokenType::Else, "else" },
        { TokenType::Enum, "enum" },
        { TokenType::Extern, "extern" },
        { TokenType::Float, "float" },
        { TokenType::For, "for" },
        { TokenType::Goto, "goto" },
        { TokenType::If, "if" },
        { TokenType::Inline, "inline" },
        { TokenType::Int, "int" },
        { TokenType::Long, "long" },
        { TokenType::Register, "register" },
        { TokenType::Restrict, "restrict" },
        { TokenType::Return, "return" },
        { TokenType::Short, "short" },
        { TokenType::Signed, "signed" },
        { TokenType::Sizeof, "sizeof" },
        { TokenType::Static, "static" },
        { TokenType::Struct, "struct" },
        { TokenType::Switch, "switch" },
        { TokenType::Typedef, "typedef" },
        { TokenType::Union, "union" },
        { TokenType::Unsigned, "unsigned" },
        { TokenType::Void, "void" },
        { TokenType::Volatile, "volatile" },
        { TokenType::While, "while" },
        { TokenType::Alignas, "_AlignAs" },
        { TokenType::Alignof, "_AlignOf" },
        { TokenType::Atomic, "_Atomic" },
        { TokenType::Bool, "_Bool" },
        { TokenType::Complex, "_Complex" },
        { TokenType::Generic, "_Generic" },
        { TokenType::Imaginary, "_Imaginary" },
        { TokenType::Noreturn, "_NoReturn" },
        { TokenType::StaticAssert, "_Static_assert" },
        { TokenType::ThreadLocal, "_Thread_local" },
        { TokenType::LBracket, "[" },
        { TokenType::RBracket, "]" },
        { TokenType::LParen, "(" },
        { TokenType::RParen, ")" },
        { TokenType::LBrace, "{" },
        { TokenType::RBrace, "}" },
        { TokenType::Dot, "." },
        { TokenType::Arrow, "->" },
        { TokenType::Incr, "++" },
        { TokenType::Decr, "--" },
        { TokenType::Ampersand, "&" },
        { TokenType::Asterisk, "*" },
        { TokenType::Plus, "+" },
        { TokenType::Minus, "-" },
        { TokenType::Tilde, "~" },
        { TokenType::Exclamation, "!" },
        { TokenType::Div, "/" },
        { TokenType::Mod, "%" },
        { TokenType::LShift, "<<" },
        { TokenType::RShift, ">>" },
        { TokenType::Less, "<" },
        { TokenType::Greater, ">" },
        { TokenType::LessEqual, "<=" },
        { TokenType::GreaterEqual, ">=" },
        { TokenType::Equal, "==" },
        { TokenType::NotEqual, "!=" },
        { TokenType::BinXor, "^" },
        { TokenType::BinOr, "|" },
        { TokenType::LogicalAnd, "&&" },
        { TokenType::LogicalOr, "||" },
        { TokenType::Question, "?" },
        { TokenType::Colon, ":" },
        { TokenType::SemiColon, ";" },
        { TokenType::Ellipsis, "..." },
        { TokenType::Assign, "=" },
        { TokenType::IMul, "*=" },
        { TokenType::IDiv, "/=" },
        { TokenType::IMod, "%=" },
        { TokenType::IPlus, "+=" },
        { TokenType::IMinus, "-=" },
        { TokenType::ILShift, "<<=" },
        { TokenType::IRShift, ">>=" },
        { TokenType::IAnd, "&=" },
        { TokenType::IXor, "^=" },
        { TokenType::IOr, "|=" },
        { TokenType::Comma, "," },
        { TokenType::Hashtag, "#" },
        { TokenType::HHashtag, "##" },
};